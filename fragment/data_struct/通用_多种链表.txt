Í·ÎÄ¼þ£º
//////////////////////////////////////////////
/*
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@(#)queue.h	8.5 (Berkeley) 8/20/94
 */

#ifndef	_SYS_QUEUE_H_
#define	_SYS_QUEUE_H_

/*
 * This file defines five types of data structures: singly-linked lists,
 * lists, simple queues, tail queues, and circular queues.
 *
 * A singly-linked list is headed by a single forward pointer. The
 * elements are singly linked for minimum space and pointer manipulation
 * overhead at the expense of O(n) removal for arbitrary elements. New
 * elements can be added to the list after an existing element or at the
 * head of the list.  Elements being removed from the head of the list
 * should use the explicit macro for this purpose for optimum
 * efficiency. A singly-linked list may only be traversed in the forward
 * direction.  Singly-linked lists are ideal for applications with large
 * datasets and few or no removals or for implementing a LIFO queue.
 *
 * A list is headed by a single forward pointer (or an array of forward
 * pointers for a hash table header). The elements are doubly linked
 * so that an arbitrary element can be removed without a need to
 * traverse the list. New elements can be added to the list before
 * or after an existing element or at the head of the list. A list
 * may only be traversed in the forward direction.
 *
 * A simple queue is headed by a pair of pointers, one the head of the
 * list and the other to the tail of the list. The elements are singly
 * linked to save space, so elements can only be removed from the
 * head of the list. New elements can be added to the list after
 * an existing element, at the head of the list, or at the end of the
 * list. A simple queue may only be traversed in the forward direction.
 *
 * A tail queue is headed by a pair of pointers, one to the head of the
 * list and the other to the tail of the list. The elements are doubly
 * linked so that an arbitrary element can be removed without a need to
 * traverse the list. New elements can be added to the list before or
 * after an existing element, at the head of the list, or at the end of
 * the list. A tail queue may be traversed in either direction.
 *
 * A circle queue is headed by a pair of pointers, one to the head of the
 * list and the other to the tail of the list. The elements are doubly
 * linked so that an arbitrary element can be removed without a need to
 * traverse the list. New elements can be added to the list before or after
 * an existing element, at the head of the list, or at the end of the list.
 * A circle queue may be traversed in either direction, but has a more
 * complex end of list detection.
 *
 * For details on the use of these macros, see the queue(3) manual page.
 */

/*
 * List definitions.
 */
#define	LIST_HEAD(name, type)	 \
struct name {	 \
 struct type *lh_first;	/* first element */	 \
}

#define	LIST_HEAD_INITIALIZER(head)	 \
 { NULL }

#define	LIST_ENTRY(type)	 \
struct {	 \
 struct type *le_next;	/* next element */	 \
 struct type **le_prev;	/* address of previous next element */	\
}

/*
 * List functions.
 */
#define	LIST_INIT(head) do {	 \
 (head)->lh_first = NULL;	 \
} while (/*CONSTCOND*/0)

#define	LIST_INSERT_AFTER(listelm, elm, field) do {	 \
 if (((elm)->field.le_next = (listelm)->field.le_next) != NULL)	\
  (listelm)->field.le_next->field.le_prev =	 \
      &(elm)->field.le_next;	 \
 (listelm)->field.le_next = (elm);	 \
 (elm)->field.le_prev = &(listelm)->field.le_next;	 \
} while (/*CONSTCOND*/0)

#define	LIST_INSERT_BEFORE(listelm, elm, field) do {	 \
 (elm)->field.le_prev = (listelm)->field.le_prev;	 \
 (elm)->field.le_next = (listelm);	 \
 *(listelm)->field.le_prev = (elm);	 \
 (listelm)->field.le_prev = &(elm)->field.le_next;	 \
} while (/*CONSTCOND*/0)

#define	LIST_INSERT_HEAD(head, elm, field) do {	 \
 if (((elm)->field.le_next = (head)->lh_first) != NULL)	 \
  (head)->lh_first->field.le_prev = &(elm)->field.le_next;\
 (head)->lh_first = (elm);	 \
 (elm)->field.le_prev = &(head)->lh_first;	 \
} while (/*CONSTCOND*/0)

#define	LIST_REMOVE(elm, field) do {	 \
 if ((elm)->field.le_next != NULL)	 \
  (elm)->field.le_next->field.le_prev = \
      (elm)->field.le_prev;	 \
 *(elm)->field.le_prev = (elm)->field.le_next;	 \
} while (/*CONSTCOND*/0)

#define	LIST_FOREACH(var, head, field)	 \
 for ((var) = ((head)->lh_first);	 \
  (var);	 \
  (var) = ((var)->field.le_next))

/*
 * List access methods.
 */
#define	LIST_EMPTY(head)	 ((head)->lh_first == NULL)
#define	LIST_FIRST(head)	 ((head)->lh_first)
#define	LIST_NEXT(elm, field)	 ((elm)->field.le_next)


/*
 * Singly-linked List definitions.
 */
#define	SLIST_HEAD(name, type)	 \
struct name {	 \
 struct type *slh_first;	/* first element */	 \
}

#define	SLIST_HEAD_INITIALIZER(head)	 \
 { NULL }

#define	SLIST_ENTRY(type)	 \
struct {	 \
 struct type *sle_next;	/* next element */	 \
}

/*
 * Singly-linked List functions.
 */
#define	SLIST_INIT(head) do {	 \
 (head)->slh_first = NULL;	 \
} while (/*CONSTCOND*/0)

#define	SLIST_INSERT_AFTER(slistelm, elm, field) do {	 \
 (elm)->field.sle_next = (slistelm)->field.sle_next;	 \
 (slistelm)->field.sle_next = (elm);	 \
} while (/*CONSTCOND*/0)

#define	SLIST_INSERT_HEAD(head, elm, field) do {	 \
 (elm)->field.sle_next = (head)->slh_first;	 \
 (head)->slh_first = (elm);	 \
} while (/*CONSTCOND*/0)

#define	SLIST_REMOVE_HEAD(head, field) do {	 \
 (head)->slh_first = (head)->slh_first->field.sle_next;	 \
} while (/*CONSTCOND*/0)

#define	SLIST_REMOVE(head, elm, type, field) do {	 \
 if ((head)->slh_first == (elm)) {	 \
  SLIST_REMOVE_HEAD((head), field);	 \
 }	 \
 else {	 \
  struct type *curelm = (head)->slh_first;	 \
  while(curelm->field.sle_next != (elm))	 \
   curelm = curelm->field.sle_next;	 \
  curelm->field.sle_next =	 \
      curelm->field.sle_next->field.sle_next;	 \
 }	 \
} while (/*CONSTCOND*/0)

#define	SLIST_FOREACH(var, head, field)	 \
 for((var) = (head)->slh_first; (var); (var) = (var)->field.sle_next)

/*
 * Singly-linked List access methods.
 */
#define	SLIST_EMPTY(head)	((head)->slh_first == NULL)
#define	SLIST_FIRST(head)	((head)->slh_first)
#define	SLIST_NEXT(elm, field)	((elm)->field.sle_next)


/*
 * Singly-linked Tail queue declarations.
 */
#define	STAILQ_HEAD(name, type)	 \
struct name {	 \
 struct type *stqh_first;	/* first element */	 \
 struct type **stqh_last;	/* addr of last next element */	 \
}

#define	STAILQ_HEAD_INITIALIZER(head)	 \
 { NULL, &(head).stqh_first }

#define	STAILQ_ENTRY(type)	 \
struct {	 \
 struct type *stqe_next;	/* next element */	 \
}

/*
 * Singly-linked Tail queue functions.
 */
#define	STAILQ_INIT(head) do {	 \
 (head)->stqh_first = NULL;	 \
 (head)->stqh_last = &(head)->stqh_first;	 \
} while (/*CONSTCOND*/0)

#define	STAILQ_INSERT_HEAD(head, elm, field) do {	 \
 if (((elm)->field.stqe_next = (head)->stqh_first) == NULL)	\
  (head)->stqh_last = &(elm)->field.stqe_next;	 \
 (head)->stqh_first = (elm);	 \
} while (/*CONSTCOND*/0)

#define	STAILQ_INSERT_TAIL(head, elm, field) do {	 \
 (elm)->field.stqe_next = NULL;	 \
 *(head)->stqh_last = (elm);	 \
 (head)->stqh_last = &(elm)->field.stqe_next;	 \
} while (/*CONSTCOND*/0)

#define	STAILQ_INSERT_AFTER(head, listelm, elm, field) do {	 \
 if (((elm)->field.stqe_next = (listelm)->field.stqe_next) == NULL)\
  (head)->stqh_last = &(elm)->field.stqe_next;	 \
 (listelm)->field.stqe_next = (elm);	 \
} while (/*CONSTCOND*/0)

#define	STAILQ_REMOVE_HEAD(head, field) do {	 \
 if (((head)->stqh_first = (head)->stqh_first->field.stqe_next) == NULL) \
  (head)->stqh_last = &(head)->stqh_first;	 \
} while (/*CONSTCOND*/0)

#define	STAILQ_REMOVE(head, elm, type, field) do {	 \
 if ((head)->stqh_first == (elm)) {	 \
  STAILQ_REMOVE_HEAD((head), field);	 \
 } else {	 \
  struct type *curelm = (head)->stqh_first;	 \
  while (curelm->field.stqe_next != (elm))	 \
   curelm = curelm->field.stqe_next;	 \
  if ((curelm->field.stqe_next =	 \
   curelm->field.stqe_next->field.stqe_next) == NULL) \
       (head)->stqh_last = &(curelm)->field.stqe_next; \
 }	 \
} while (/*CONSTCOND*/0)

#define	STAILQ_FOREACH(var, head, field)	 \
 for ((var) = ((head)->stqh_first);	 \
  (var);	 \
  (var) = ((var)->field.stqe_next))

#define	STAILQ_CONCAT(head1, head2) do {	 \
 if (!STAILQ_EMPTY((head2))) {	 \
  *(head1)->stqh_last = (head2)->stqh_first;	 \
  (head1)->stqh_last = (head2)->stqh_last;	 \
  STAILQ_INIT((head2));	 \
 }	 \
} while (/*CONSTCOND*/0)

/*
 * Singly-linked Tail queue access methods.
 */
#define	STAILQ_EMPTY(head)	((head)->stqh_first == NULL)
#define	STAILQ_FIRST(head)	((head)->stqh_first)
#define	STAILQ_NEXT(elm, field)	((elm)->field.stqe_next)


/*
 * Simple queue definitions.
 */
#define	SIMPLEQ_HEAD(name, type)	 \
struct name {	 \
 struct type *sqh_first;	/* first element */	 \
 struct type **sqh_last;	/* addr of last next element */	 \
}

#define	SIMPLEQ_HEAD_INITIALIZER(head)	 \
 { NULL, &(head).sqh_first }

#define	SIMPLEQ_ENTRY(type)	 \
struct {	 \
 struct type *sqe_next;	/* next element */	 \
}

/*
 * Simple queue functions.
 */
#define	SIMPLEQ_INIT(head) do {	 \
 (head)->sqh_first = NULL;	 \
 (head)->sqh_last = &(head)->sqh_first;	 \
} while (/*CONSTCOND*/0)

#define	SIMPLEQ_INSERT_HEAD(head, elm, field) do {	 \
 if (((elm)->field.sqe_next = (head)->sqh_first) == NULL)	\
  (head)->sqh_last = &(elm)->field.sqe_next;	 \
 (head)->sqh_first = (elm);	 \
} while (/*CONSTCOND*/0)

#define	SIMPLEQ_INSERT_TAIL(head, elm, field) do {	 \
 (elm)->field.sqe_next = NULL;	 \
 *(head)->sqh_last = (elm);	 \
 (head)->sqh_last = &(elm)->field.sqe_next;	 \
} while (/*CONSTCOND*/0)

#define	SIMPLEQ_INSERT_AFTER(head, listelm, elm, field) do {	 \
 if (((elm)->field.sqe_next = (listelm)->field.sqe_next) == NULL)\
  (head)->sqh_last = &(elm)->field.sqe_next;	 \
 (listelm)->field.sqe_next = (elm);	 \
} while (/*CONSTCOND*/0)

#define	SIMPLEQ_REMOVE_HEAD(head, field) do {	 \
 if (((head)->sqh_first = (head)->sqh_first->field.sqe_next) == NULL) \
  (head)->sqh_last = &(head)->sqh_first;	 \
} while (/*CONSTCOND*/0)

#define	SIMPLEQ_REMOVE(head, elm, type, field) do {	 \
 if ((head)->sqh_first == (elm)) {	 \
  SIMPLEQ_REMOVE_HEAD((head), field);	 \
 } else {	 \
  struct type *curelm = (head)->sqh_first;	 \
  while (curelm->field.sqe_next != (elm))	 \
   curelm = curelm->field.sqe_next;	 \
  if ((curelm->field.sqe_next =	 \
   curelm->field.sqe_next->field.sqe_next) == NULL) \
       (head)->sqh_last = &(curelm)->field.sqe_next; \
 }	 \
} while (/*CONSTCOND*/0)

#define	SIMPLEQ_FOREACH(var, head, field)	 \
 for ((var) = ((head)->sqh_first);	 \
  (var);	 \
  (var) = ((var)->field.sqe_next))

/*
 * Simple queue access methods.
 */
#define	SIMPLEQ_EMPTY(head)	 ((head)->sqh_first == NULL)
#define	SIMPLEQ_FIRST(head)	 ((head)->sqh_first)
#define	SIMPLEQ_NEXT(elm, field)	((elm)->field.sqe_next)


/*
 * Tail queue definitions.
 */
#define	_TAILQ_HEAD(name, type, qual)	 \
struct name {	 \
 qual type *tqh_first;	 /* first element */	 \
 qual type *qual *tqh_last;	/* addr of last next element */	\
}
#define TAILQ_HEAD(name, type)	_TAILQ_HEAD(name, struct type,)

#define	TAILQ_HEAD_INITIALIZER(head)	 \
 { NULL, &(head).tqh_first }

#define	_TAILQ_ENTRY(type, qual)	 \
struct {	 \
 qual type *tqe_next;	 /* next element */	 \
 qual type *qual *tqe_prev;	/* address of previous next element */\
}
#define TAILQ_ENTRY(type)	_TAILQ_ENTRY(struct type,)

/*
 * Tail queue functions.
 */
#define	TAILQ_INIT(head) do {	 \
 (head)->tqh_first = NULL;	 \
 (head)->tqh_last = &(head)->tqh_first;	 \
} while (/*CONSTCOND*/0)

#define	TAILQ_INSERT_HEAD(head, elm, field) do {	 \
 if (((elm)->field.tqe_next = (head)->tqh_first) != NULL)	\
  (head)->tqh_first->field.tqe_prev =	 \
      &(elm)->field.tqe_next;	 \
 else	 \
  (head)->tqh_last = &(elm)->field.tqe_next;	 \
 (head)->tqh_first = (elm);	 \
 (elm)->field.tqe_prev = &(head)->tqh_first;	 \
} while (/*CONSTCOND*/0)

#define	TAILQ_INSERT_TAIL(head, elm, field) do {	 \
 (elm)->field.tqe_next = NULL;	 \
 (elm)->field.tqe_prev = (head)->tqh_last;	 \
 *(head)->tqh_last = (elm);	 \
 (head)->tqh_last = &(elm)->field.tqe_next;	 \
} while (/*CONSTCOND*/0)

#define	TAILQ_INSERT_AFTER(head, listelm, elm, field) do {	 \
 if (((elm)->field.tqe_next = (listelm)->field.tqe_next) != NULL)\
  (elm)->field.tqe_next->field.tqe_prev = \
      &(elm)->field.tqe_next;	 \
 else	 \
  (head)->tqh_last = &(elm)->field.tqe_next;	 \
 (listelm)->field.tqe_next = (elm);	 \
 (elm)->field.tqe_prev = &(listelm)->field.tqe_next;	 \
} while (/*CONSTCOND*/0)

#define	TAILQ_INSERT_BEFORE(listelm, elm, field) do {	 \
 (elm)->field.tqe_prev = (listelm)->field.tqe_prev;	 \
 (elm)->field.tqe_next = (listelm);	 \
 *(listelm)->field.tqe_prev = (elm);	 \
 (listelm)->field.tqe_prev = &(elm)->field.tqe_next;	 \
} while (/*CONSTCOND*/0)

#define	TAILQ_REMOVE(head, elm, field) do {	 \
 if (((elm)->field.tqe_next) != NULL)	 \
  (elm)->field.tqe_next->field.tqe_prev = \
      (elm)->field.tqe_prev;	 \
 else	 \
  (head)->tqh_last = (elm)->field.tqe_prev;	 \
 *(elm)->field.tqe_prev = (elm)->field.tqe_next;	 \
} while (/*CONSTCOND*/0)

#define	TAILQ_FOREACH(var, head, field)	 \
 for ((var) = ((head)->tqh_first);	 \
  (var);	 \
  (var) = ((var)->field.tqe_next))

#define	TAILQ_FOREACH_REVERSE(var, head, headname, field)	 \
 for ((var) = (*(((struct headname *)((head)->tqh_last))->tqh_last));	\
  (var);	 \
  (var) = (*(((struct headname *)((var)->field.tqe_prev))->tqh_last)))

#define	TAILQ_CONCAT(head1, head2, field) do {	 \
 if (!TAILQ_EMPTY(head2)) {	 \
  *(head1)->tqh_last = (head2)->tqh_first;	 \
  (head2)->tqh_first->field.tqe_prev = (head1)->tqh_last;	\
  (head1)->tqh_last = (head2)->tqh_last;	 \
  TAILQ_INIT((head2));	 \
 }	 \
} while (/*CONSTCOND*/0)

/*
 * Tail queue access methods.
 */
#define	TAILQ_EMPTY(head)	 ((head)->tqh_first == NULL)
#define	TAILQ_FIRST(head)	 ((head)->tqh_first)
#define	TAILQ_NEXT(elm, field)	 ((elm)->field.tqe_next)

#define	TAILQ_LAST(head, headname) \
 (*(((struct headname *)((head)->tqh_last))->tqh_last))
#define	TAILQ_PREV(elm, headname, field) \
 (*(((struct headname *)((elm)->field.tqe_prev))->tqh_last))


/*
 * Circular queue definitions.
 */
#define	CIRCLEQ_HEAD(name, type)	 \
struct name {	 \
 struct type *cqh_first;	 /* first element */	 \
 struct type *cqh_last;	 /* last element */	 \
}

#define	CIRCLEQ_HEAD_INITIALIZER(head)	 \
 { (void *)&head, (void *)&head }

#define	CIRCLEQ_ENTRY(type)	 \
struct {	 \
 struct type *cqe_next;	 /* next element */	 \
 struct type *cqe_prev;	 /* previous element */	 \
}

/*
 * Circular queue functions.
 */
#define	CIRCLEQ_INIT(head) do {	 \
 (head)->cqh_first = (void *)(head);	 \
 (head)->cqh_last = (void *)(head);	 \
} while (/*CONSTCOND*/0)

#define	CIRCLEQ_INSERT_AFTER(head, listelm, elm, field) do {	 \
 (elm)->field.cqe_next = (listelm)->field.cqe_next;	 \
 (elm)->field.cqe_prev = (listelm);	 \
 if ((listelm)->field.cqe_next == (void *)(head))	 \
  (head)->cqh_last = (elm);	 \
 else	 \
  (listelm)->field.cqe_next->field.cqe_prev = (elm);	\
 (listelm)->field.cqe_next = (elm);	 \
} while (/*CONSTCOND*/0)

#define	CIRCLEQ_INSERT_BEFORE(head, listelm, elm, field) do {	 \
 (elm)->field.cqe_next = (listelm);	 \
 (elm)->field.cqe_prev = (listelm)->field.cqe_prev;	 \
 if ((listelm)->field.cqe_prev == (void *)(head))	 \
  (head)->cqh_first = (elm);	 \
 else	 \
  (listelm)->field.cqe_prev->field.cqe_next = (elm);	\
 (listelm)->field.cqe_prev = (elm);	 \
} while (/*CONSTCOND*/0)

#define	CIRCLEQ_INSERT_HEAD(head, elm, field) do {	 \
 (elm)->field.cqe_next = (head)->cqh_first;	 \
 (elm)->field.cqe_prev = (void *)(head);	 \
 if ((head)->cqh_last == (void *)(head))	 \
  (head)->cqh_last = (elm);	 \
 else	 \
  (head)->cqh_first->field.cqe_prev = (elm);	 \
 (head)->cqh_first = (elm);	 \
} while (/*CONSTCOND*/0)

#define	CIRCLEQ_INSERT_TAIL(head, elm, field) do {	 \
 (elm)->field.cqe_next = (void *)(head);	 \
 (elm)->field.cqe_prev = (head)->cqh_last;	 \
 if ((head)->cqh_first == (void *)(head))	 \
  (head)->cqh_first = (elm);	 \
 else	 \
  (head)->cqh_last->field.cqe_next = (elm);	 \
 (head)->cqh_last = (elm);	 \
} while (/*CONSTCOND*/0)

#define	CIRCLEQ_REMOVE(head, elm, field) do {	 \
 if ((elm)->field.cqe_next == (void *)(head))	 \
  (head)->cqh_last = (elm)->field.cqe_prev;	 \
 else	 \
  (elm)->field.cqe_next->field.cqe_prev =	 \
      (elm)->field.cqe_prev;	 \
 if ((elm)->field.cqe_prev == (void *)(head))	 \
  (head)->cqh_first = (elm)->field.cqe_next;	 \
 else	 \
  (elm)->field.cqe_prev->field.cqe_next =	 \
      (elm)->field.cqe_next;	 \
} while (/*CONSTCOND*/0)

#define	CIRCLEQ_FOREACH(var, head, field)	 \
 for ((var) = ((head)->cqh_first);	 \
  (var) != (const void *)(head);	 \
  (var) = ((var)->field.cqe_next))

#define	CIRCLEQ_FOREACH_REVERSE(var, head, field)	 \
 for ((var) = ((head)->cqh_last);	 \
  (var) != (const void *)(head);	 \
  (var) = ((var)->field.cqe_prev))

/*
 * Circular queue access methods.
 */
#define	CIRCLEQ_EMPTY(head)	 ((head)->cqh_first == (void *)(head))
#define	CIRCLEQ_FIRST(head)	 ((head)->cqh_first)
#define	CIRCLEQ_LAST(head)	 ((head)->cqh_last)
#define	CIRCLEQ_NEXT(elm, field)	((elm)->field.cqe_next)
#define	CIRCLEQ_PREV(elm, field)	((elm)->field.cqe_prev)

#define CIRCLEQ_LOOP_NEXT(head, elm, field)	 \
 (((elm)->field.cqe_next == (void *)(head))	 \
     ? ((head)->cqh_first)	 \
     : (elm->field.cqe_next))
#define CIRCLEQ_LOOP_PREV(head, elm, field)	 \
 (((elm)->field.cqe_prev == (void *)(head))	 \
     ? ((head)->cqh_last)	 \
     : (elm->field.cqe_prev))

#endif	/* sys/queue.h */


////////////////////////////////////
ËµÃ÷
µ¥Á´±í(singly-linked list)

        singly-linked list¾ÍÊÇÒ»µ¥Á´±í¡£
        singly-linked listÏà¹ØµÄ¶¨Òå£º
ºê¶¨Òå	ËµÃ÷
SLIST_HEAD(name, type)	¶¨Òå±íÍ·½áµã¡£ 
name: ±íÍ·½áµãÃû¡£ 
type: ½áµãÀàÐÍ¡£
SLIST_HEAD_INITIALIZER(head)	³õÊ¼»¯Í·½áµã¡£ 
head: ±íÍ·½áµã¡£
SLIST_ENTRY(type)	¶¨ÒåÁ´±íµÄÁ´Óò¡£ 
type: ½áµãÀàÐÍ¡£
        singly-linked listº¯Êý£º
ºê¶¨Òå	ËµÃ÷
SLIST_INIT(head)	³õÊ¼»¯Í·½áµã¡£ 
head: ±íÍ·½áµã¡£
SLIST_INSERT_AFTER(slistelm, elm, field)	½«½áµãelm²åÈëµ½½áµãslistelmºóÃæ¡£ 
slistelm£ºÁ´±íÖÐÄ³½áµã¡£ 
elm:Òª²åÈëµÄ½áµã¡£ 
field:Á´±íÖÐÁ´ÓòµÄÃû³Æ¡£
SLIST_INSERT_HEAD(head, elm, field)	½«½áµãelm²åÈëµ½Í·½áµãheadºóÃæ¡£ 
head: ±íÍ·½áµã¡£ 
elm:Òª²åÈëµÄ½áµã¡£ 
field:Á´±íÖÐÁ´ÓòµÄÃû³Æ¡£
SLIST_REMOVE_HEAD(head, field)	ÒÆ³ý½«±íÍ·½áµãÏÂÃæÒ»¸ö½áµã¡£ 
head: ±íÍ·½áµã¡£ 
field:Á´±íÖÐÁ´ÓòµÄÃû³Æ¡£
SLIST_REMOVE(head, elm, type, field)	ÒÆ³ý½«elm½áµã£¬elm½áµãÒ»¶¨ÒªÊÇÁ´±íÖÐÒ»½áµã¡£ 
head: ±íÍ·½áµã¡£ 
elm:Ä³½áµã¡£ 
type: ½áµãÀàÐÍ¡£ 
field:Á´±íÖÐÁ´ÓòµÄÃû³Æ¡£
SLIST_FOREACH(var, head, field)	±éÀúÁ´±í£¬Ïàµ±ÓÚforÑ­»·¡£ 
var: ½áµãÀàÐÍµÄ±äÁ¿Ãû³Æ¡£ 
head: ±íÍ·½áµã¡£ 
field:Á´±íÖÐÁ´ÓòµÄÃû³Æ¡£
        singly-linked list ·ÃÎÊ·½·¨£º
ºê¶¨Òå	ËµÃ÷
SLIST_EMPTY(head)	ÅÐ¶ÏÁ´±íÊÇ·ñÎª¿Õ¡£ 
head: ±íÍ·½áµã¡£
SLIST_FIRST(head)	·ÃÎÊÁ´±íÀïµÄµÚÒ»¸öÔªËØ¡£ 
head: ±íÍ·½áµã¡£
SLIST_NEXT(elm, field)	·ÃÎÊelm½áµãºóÒ»¸öÔªËØ¡£ 
elm:Ä³½áµã¡£ 
field:Á´±íÖÐÁ´ÓòµÄÃû³Æ¡£

Àý×Ó1
#include <stdlib.h>
#include <malloc.h>        
#include "queue.h"  
#include <memory.h>      

struct ListItem
{
    int data;
    SLIST_ENTRY(ListItem) entry;
};

void list_demo(void)
{
    struct ListItem* item = NULL;
   
    SLIST_HEAD(SListHead, ListItem) lhead;

    SLIST_INIT(&lhead);

    item = (struct ListItem*)malloc(sizeof(struct ListItem));
    item->data = 1;

    SLIST_INSERT_HEAD(&lhead, item, entry);
   
    item = (struct ListItem*)malloc(sizeof(struct ListItem));
    item->data = 2;
   
    SLIST_INSERT_HEAD(&lhead, item, entry);

    SLIST_FOREACH(item, &lhead, entry){
        printf("%d ", item->data);
    }

    printf("\n");

    while(!SLIST_EMPTY(&lhead)){
        item = SLIST_FIRST(&lhead);
        printf("remove %d\n", item->data);
        SLIST_REMOVE_HEAD(&lhead, entry);
        free(item);
    }

}

int main(void)  
{  
    list_demo();
}

Àý×Ó2
#include <stdlib.h>
#include <malloc.h>        
#include "queue.h"  
#include <memory.h>  

struct SListItem
{
    int data;
    SLIST_ENTRY(SListItem) entry;
};
void slist_demo()
{
    struct SListItem* item = NULL;
    SLIST_HEAD(SListHead, SListItem) shead;
   
    SLIST_INIT(&shead);

    item = (struct SListItem*)malloc(sizeof(struct SListItem));
    item->data = 1;

    SLIST_INSERT_HEAD(&shead, item, entry);

    item = (struct SListItem*)malloc(sizeof(struct SListItem));
    item->data = 2;

    SLIST_INSERT_HEAD(&shead, item, entry);

    SLIST_FOREACH(item, &shead, entry){
        printf("%d ", item->data);
    }

    printf("\n");

    while(!SLIST_EMPTY(&shead)){
        item = SLIST_FIRST(&shead);
        printf("remove %d\n", item->data);
        SLIST_REMOVE(&shead, item, SListItem, entry);
        free(item);
    }

}

int main(void)  
{  
    slist_demo();
}


Ë«ÏòÁ´±í(list)

        list¾ÍÊÇË«ÏòÁ´±í£¬²»¹ýÁ´ÓòÓÐµã¹Å¹Ö£¬Ö¸ÏòÇ°Ò»¸ö½áµãÊÇÖ¸ÕëµÄÖ¸Õë¡£
        list Ïà¹Ø¶¨Òå
ºê¶¨Òå	ËµÃ÷
LIST_HEAD(name, type)	¶¨Òå±íÍ·½áµã¡£ 
name: ±íÍ·½áµãÃû¡£ 
type: ½áµãÀàÐÍ¡£
LIST_HEAD_INITIALIZER(head)	³õÊ¼»¯Í·½áµã¡£ 
head: ±íÍ·½áµã¡£
LIST_ENTRY(type)	¶¨ÒåÁ´±íµÄÁ´Óò¡£ 
type: ½áµãÀàÐÍ¡£
        listº¯Êý
ºê¶¨Òå	ËµÃ÷
LIST_INIT(head)	³õÊ¼»¯Í·½áµã¡£ 
head: ±íÍ·½áµã¡£
LIST_INSERT_AFTER(listelm, elm, field)	½«½áµãelm²åÈëµ½½áµãlistelmºóÃæ¡£ 
listelm£ºÁ´±íÖÐÄ³½áµã¡£ 
elm:Òª²åÈëµÄ½áµã¡£ 
field:Á´±íÖÐÁ´ÓòµÄÃû³Æ¡£
LIST_INSERT_BEFORE(listelm, elm, field)	½«½áµãelm²åÈëµ½½áµãlistelmÇ°Ãæ¡£ 
listelm£ºÁ´±íÖÐÄ³½áµã¡£ 
elm:Òª²åÈëµÄ½áµã¡£ 
field:Á´±íÖÐÁ´ÓòµÄÃû³Æ¡£
LIST_INSERT_HEAD(head, elm, field)	½«½áµãelm²åÈëµ½Í·½áµãheadºóÃæ¡£ 
head: ±íÍ·½áµã¡£ 
elm:Òª²åÈëµÄ½áµã¡£ 
field:Á´±íÖÐÁ´ÓòµÄÃû³Æ¡£
LIST_REMOVE(elm, field)	ÒÆ³ý½«elm½áµã¡£ 
elm:Ä³½áµã¡£ 
field:Á´±íÖÐÁ´ÓòµÄÃû³Æ¡£
LIST_FOREACH(var, head, field)	±éÀúÁ´±í£¬Ïàµ±ÓÚforÑ­»·¡£ 
var: ½áµãÀàÐÍµÄ±äÁ¿Ãû³Æ¡£ 
head: ±íÍ·½áµã¡£ 
field:Á´±íÖÐÁ´ÓòµÄÃû³Æ¡£
        list·ÃÎÊ·½·¨
ºê¶¨Òå	ËµÃ÷
LIST_EMPTY(head)	ÅÐ¶ÏÁ´±íÊÇ·ñÎª¿Õ¡£ 
head: ±íÍ·½áµã¡£
LIST_FIRST(head)	·ÃÎÊÁ´±íÀïµÄµÚÒ»¸öÔªËØ¡£ 
head: ±íÍ·½áµã¡£
LIST_NEXT(elm, field)	·ÃÎÊelm½áµãºóÒ»¸öÔªËØ¡£ 
elm:Ä³½áµã¡£ 
field:Á´±íÖÐÁ´ÓòµÄÃû³Æ¡£


Àý×Ó£º
#include <stdlib.h>
#include <malloc.h>        
#include "queue.h"  
#include <memory.h>      

struct ListItem
{
    int data;
    LIST_ENTRY(ListItem) entry;
};

void list_demo(void)
{
    struct ListItem* item = NULL;
   
    LIST_HEAD(ListHead, ListItem) lhead; //¶¨ÒålheadÎªÍ·½áµã£¬ÀàÐÍÎªListItem

    LIST_INIT(&lhead); //³õÊ¼»¯Á´±í

    item = (struct ListItem*)malloc(sizeof(struct ListItem));
    item->data = 1;

    LIST_INSERT_HEAD(&lhead, item, entry); //Õâ¶ÎºÍÏÂÒ»¶Î·Ö±ð³õÊ¼»¯2¸ö½áµã²¢ÇÒ½«Æä¹ÒÔÚÁ´±íÉÏÃæ
   
    item = (struct ListItem*)malloc(sizeof(struct ListItem));
    item->data = 2;
   
    LIST_INSERT_HEAD(&lhead, item, entry);

    LIST_FOREACH(item, &lhead, entry){ //±éÀúÁ´±í£¬´òÓ¡ÐÅÏ¢
        printf("%d ", item->data);
    }

    printf("\n");

    while(!LIST_EMPTY(&lhead)){ //´ÓÎ²²¿¿ªÊ¼È¡½áµã´òÓ¡ºÍÉ¾³ý
        item = LIST_FIRST(&lhead);
        printf("remove %d\n", item->data);
        LIST_REMOVE(item, entry);
        free(item);
    }

}

int main(void)  
{  
    list_demo();
}

¼òµ¥¶ÓÁÐ(simple queue)

        ¼òµ¥À´Ëµ£¬¾ÍÊÇ±í¶ÔÓÐÁ½¸öÁ´Óò£¬·Ö±ðÖ¸ÏòÍ·ºÍÎ²¡£
        simple queue ¶¨Òå£¨¾ßÌåËµÃ÷²»ÔÙÐ´£¬¿ÉÒÔ²Î¿¼listµÄ£¬»òÕß¾ÍÖ±½ÓÕ¹¿ªºê£©
ºê¶¨Òå	ËµÃ÷
SIMPLEQ_HEAD(name, type)	

SIMPLEQ_HEAD_INITIALIZER(head)	

SIMPLEQ_ENTRY(type)	

        simple queueº¯Êý£¨¾ßÌåËµÃ÷²»ÔÙÐ´£¬¿ÉÒÔ²Î¿¼listµÄ£¬»òÕß¾ÍÖ±½ÓÕ¹¿ªºê£©
ºê¶¨Òå	ËµÃ÷
SIMPLEQ_INIT(head)	

SIMPLEQ_INSERT_HEAD(head, elm, field)	

SIMPLEQ_INSERT_TAIL(head, elm, field)	

SIMPLEQ_INSERT_AFTER(head, listelm, elm, field)	

SIMPLEQ_REMOVE_HEAD(head, field)	

SIMPLEQ_REMOVE(head, elm, type, field)	

SIMPLEQ_FOREACH(var, head, field)	

        simple queue·½·¨£¨¾ßÌåËµÃ÷²»ÔÙÐ´£¬¿ÉÒÔ²Î¿¼listµÄ£¬»òÕß¾ÍÖ±½ÓÕ¹¿ªºê£©
ºê¶¨Òå	ËµÃ÷
SIMPLEQ_EMPTY(head)	

SIMPLEQ_FIRST(head)	

SIMPLEQ_NEXT(elm, field)	

        ¼òµ¥Àý×Ó£º
        ÓÃ·¨ÓëlistÓÃ·¨ÀàËÆ£¬²»ÔÙÖØ¸´¡£
µ¥Á´Î²¶ÓÁÐ(singled-linked tail queue)

        Õâ¸öºÍSimple queueÊÇÒ»ÑùµÄ£¬²Î¿¼simple queue
        singled-linked tail queue¶¨Òå(¾ßÌåËµÃ÷²»ÔÙÐ´£¬¿ÉÒÔ²Î¿¼listµÄ£¬»òÕß¾ÍÖ±½ÓÕ¹¿ªºê)
ºê¶¨Òå	ËµÃ÷
STAILQ_HEAD(name, type)	

STAILQ_HEAD_INITIALIZER(head)	

STAILQ_ENTRY(type)	

       tail queue º¯Êý£¨¾ßÌåËµÃ÷²»ÔÙÐ´£¬¿ÉÒÔ²Î¿¼listµÄ£¬»òÕß¾ÍÖ±½ÓÕ¹¿ªºê£©
ºê¶¨Òå	ËµÃ÷
STAILQ_INIT(head)	

STAILQ_INSERT_HEAD(head, elm, field)	

STAILQ_INSERT_TAIL(head, elm, field)	

STAILQ_INSERT_AFTER(head, listelm, elm, field)	

STAILQ_REMOVE_HEAD(head, field)	

STAILQ_REMOVE(head, elm, type, field)	

STAILQ_FOREACH(var, head, field)	

        tail queue·½·¨£¨¾ßÌåËµÃ÷²»ÔÙÐ´£¬¿ÉÒÔ²Î¿¼listµÄ£¬»òÕß¾ÍÖ±½ÓÕ¹¿ªºê£©
ºê¶¨Òå	ËµÃ÷
STAILQ_EMPTY(head)	

STAILQ_FIRST(head)	

STAILQ_NEXT(elm, field)	

        ¼òµ¥Àý×Ó£º
#include <stdlib.h>
#include <malloc.h>        
#include "queue.h"  
#include <memory.h>      
struct ListItem
{
    int data;
    SIMPLEQ_ENTRY(ListItem) entry;
};
void list_demo(void)
{
    struct ListItem* item = NULL;
   
    SIMPLEQ_HEAD(SListHead, ListItem) lhead;
    SIMPLEQ_INIT(&lhead);
    item = (struct ListItem*)malloc(sizeof(struct ListItem));
    item->data = 1;
    SIMPLEQ_INSERT_HEAD(&lhead, item, entry);
   
    item = (struct ListItem*)malloc(sizeof(struct ListItem));
    item->data = 2;
   
    SIMPLEQ_INSERT_HEAD(&lhead, item, entry);
    SIMPLEQ_FOREACH(item, &lhead, entry){
        printf("%d ", item->data);
    }
    printf("\n");
    while(!SIMPLEQ_EMPTY(&lhead)){
        item = SIMPLEQ_FIRST(&lhead);
        printf("remove %d\n", item->data);
        SIMPLEQ_REMOVE_HEAD(&lhead, entry);
        free(item);
    }
}
int main(void)  
{  
    list_demo();
}
Ñ­»·¶ÓÁÐ(circle queue)

        Ñ­»·¶ÓÁÐ¡£
        circle queue¶¨Òå£¨¾ßÌåËµÃ÷²»ÔÙÐ´£¬¿ÉÒÔ²Î¿¼listµÄ£¬»òÕß¾ÍÖ±½ÓÕ¹¿ªºê£©
ºê¶¨Òå	ËµÃ÷
CIRCLEQ_HEAD(name, type)	

CIRCLEQ_HEAD_INITIALIZER(head)	

CIRCLEQ_ENTRY(type)	

        circle queueº¯Êý£¨¾ßÌåËµÃ÷²»ÔÙÐ´£¬¿ÉÒÔ²Î¿¼listµÄ£¬»òÕß¾ÍÖ±½ÓÕ¹¿ªºê£©
ºê¶¨Òå	ËµÃ÷
CIRCLEQ_INIT(head)	

CIRCLEQ_INSERT_AFTER(head, listelm, elm, field)	

CIRCLEQ_INSERT_BEFORE(head, listelm, elm, field)	

CIRCLEQ_INSERT_HEAD(head, elm, field)	

CIRCLEQ_REMOVE(head, elm, field)	

CIRCLEQ_FOREACH(var, head, field)	

        circle queue·ÃÎÊ·½·¨£¨¾ßÌåËµÃ÷²»ÔÙÐ´£¬¿ÉÒÔ²Î¿¼listµÄ£¬»òÕß¾ÍÖ±½ÓÕ¹¿ªºê£©
ºê¶¨Òå	ËµÃ÷
CIRCLEQ_EMPTY(head)	

CIRCLEQ_FIRST(head)	

CIRCLEQ_NEXT(elm, field)	

#include <stdlib.h>
#include <malloc.h>        
#include "queue.h"  
#include <memory.h>      

struct ListItem
{
    int data;
    CIRCLEQ_ENTRY(ListItem) entry;
};

void list_demo(void)
{
    struct ListItem* item = NULL;
   
    CIRCLEQ_HEAD(ListHead, ListItem) lhead;

    CIRCLEQ_INIT(&lhead);

    item = (struct ListItem*)malloc(sizeof(struct ListItem));
    item->data = 1;

    CIRCLEQ_INSERT_HEAD(&lhead, item, entry);
   
    item = (struct ListItem*)malloc(sizeof(struct ListItem));
    item->data = 2;
   
    CIRCLEQ_INSERT_HEAD(&lhead, item, entry);

    CIRCLEQ_FOREACH(item, &lhead, entry){
        printf("%d ", item->data);
    }

    printf("\n");

    while(!CIRCLEQ_EMPTY(&lhead)){
        item = CIRCLEQ_FIRST(&lhead);
        printf("remove %d\n", item->data);
        CIRCLEQ_REMOVE(&lhead,item, entry);
        free(item);
    }

}

int main(void)  
{  
    list_demo();
}
